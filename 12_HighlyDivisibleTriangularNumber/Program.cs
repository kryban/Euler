using System;
using System.Threading;
using System.Threading.Tasks;
using _0_Base;

namespace _12_HighlyDivisibleTriangularNumber
{
    class Program : SolverBase
    {
        static void Main(string[] args)
        {
            /*
            The sequence of triangle numbers is generated by adding the natural numbers. 
            So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
            Let us list the factors of the first seven triangle numbers:
             1: 1
             3: 1,3
             6: 1,2,3,6
            10: 1,2,5,10
            15: 1,3,5,15
            21: 1,3,7,21
            28: 1,2,4,7,14,28
            We can see that 28 is the first triangle number to have over five divisors.
            What is the value of the first triangle number to have over five hundred divisors?
            */

            bool found=false ;
            long sub = 1;
            long triangleNumber = 1;
            long divisors = 0;

            while (!found)
            {
                sub++;
                triangleNumber += sub;

                long i = 1;// found ? triangleNumber+1 : 1;
                divisors = 1; //+1 because Parallel for is exclusive max nr

                Parallel.For(i, Interlocked.Read(ref triangleNumber), (i, state) => 
                {
                    if (triangleNumber % i == 0)
                    {
                        Interlocked.Add(ref divisors, 1);
                    }

                    if (divisors == 500)
                    {
                        found = true;
                        state.Stop();

                        Console.WriteLine($"FOUND: {triangleNumber} has {divisors} dividors.");
                    }
                });

                Console.Write($"{triangleNumber}={divisors},");
            }

            ShowResults(12, triangleNumber);
        }
    }
}
